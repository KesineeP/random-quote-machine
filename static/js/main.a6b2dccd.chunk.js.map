{"version":3,"sources":["components/Quotes.js","App.js","reportWebVitals.js","index.js"],"names":["Quotes","useState","quote","setQuote","author","setAuthor","useEffect","getQuote","fetch","then","res","json","data","dataQuotes","quotes","randomQuote","Math","floor","random","length","currentQuote","currentAuthor","document","querySelector","setAttribute","encodeURIComponent","id","className","style","fontSize","paddingRight","paddingLeft","target","onClick","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"gOA8EeA,EAvEA,WAAO,IAAD,EACSC,mBAAS,IADlB,mBACVC,EADU,KACHC,EADG,OAEWF,mBAAS,IAFpB,mBAEVG,EAFU,KAEFC,EAFE,KAIjBC,qBAAU,WACNC,MACD,IAEH,IAAMA,EAAW,WAEbC,MADO,0IAEFC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACF,IAAIC,EAAaD,EAAKE,OAElBC,EAAcF,EADCG,KAAKC,MAAMD,KAAKE,SAAWL,EAAWM,SAGzDhB,EAASY,EAAYb,OACrBG,EAAUU,EAAYX,WAE9B,IAAMgB,EAAelB,EACfmB,EAAgBjB,EACNkB,SAASC,cAAc,gBAC/BC,aACJ,OACA,iFACAC,mBAAmB,IAAML,EAAe,KAAOC,IAEpCC,SAASC,cAAc,iBAC/BC,aAAa,OAAQ,6FACxBC,mBAAmBJ,GACnB,YACAI,mBAAmBL,GACnB,yFAMR,OACI,sBAAKM,GAAG,YAAR,UACI,sBAAMA,GAAG,OAAT,SACI,oBAAGC,UAAU,OAAb,UACI,cAAC,IAAD,CAAaC,MAAO,CAAEC,SAAU,OAAQC,aAAc,UACrD5B,EACD,cAAC,IAAD,CAAc0B,MAAO,CAAEC,SAAU,SAAUE,YAAa,cAGhE,qBAAKL,GAAG,SAAR,SACI,kCAAKtB,OAET,sBAAKsB,GAAG,UAAR,UACI,sBAAKA,GAAG,eAAR,UACI,mBAAGM,OAAO,WAAWN,GAAG,cAAxB,SACI,cAAC,IAAD,MAEJ,mBAAGM,OAAO,WAAWN,GAAG,eAAxB,SACI,cAAC,IAAD,SAGR,wBAAQO,QAAS,WAvBzB1B,KAuB8CmB,GAAG,YAAzC,8BCtDDQ,MATf,WACE,OACE,sBAAKP,UAAU,MAAf,UACE,cAAC,EAAD,IACA,yDCISQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB5B,MAAK,YAAkD,IAA/C6B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFvB,SAASwB,eAAe,SAM1BX,M","file":"static/js/main.a6b2dccd.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { FaTwitterSquare } from 'react-icons/fa';\nimport { FaQuoteLeft } from 'react-icons/fa';\nimport { FaQuoteRight } from 'react-icons/fa';\nimport { FaTumblrSquare } from 'react-icons/fa';\n\n\nconst Quotes = () => {\n    const [quote, setQuote] = useState('');\n    const [author, setAuthor] = useState('');\n\n    useEffect(() => {\n        getQuote()\n    }, [])\n\n    const getQuote = () => {\n        let url = `https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json`;\n        fetch(url)\n            .then(res => res.json())\n            .then(data => {\n                let dataQuotes = data.quotes;\n                let randomNumber = Math.floor(Math.random() * dataQuotes.length);\n                let randomQuote = dataQuotes[randomNumber];\n\n                setQuote(randomQuote.quote);\n                setAuthor(randomQuote.author);\n            })\n        const currentQuote = quote;\n        const currentAuthor = author;\n        const twitter = document.querySelector('#tweet-quote')\n        twitter.setAttribute(\n            'href',\n            'https://twitter.com/intent/tweet?hashtags=Quote,Fcc&related=freecodecamp&text=' +\n            encodeURIComponent('\"' + currentQuote + '\" ' + currentAuthor)\n        )\n        const tumblr = document.querySelector('#tumblr-quote')\n        tumblr.setAttribute('href', 'https://www.tumblr.com/widgets/share/tool?posttype=quote&tags=quotes,freecodecamp&caption=' +\n            encodeURIComponent(currentAuthor) +\n            '&content=' +\n            encodeURIComponent(currentQuote) +\n            '&canonicalUrl=https%3A%2F%2Fwww.tumblr.com%2Fbuttons&shareSource=tumblr_share_button'\n        )\n    }\n    const handleClick = () => {\n        getQuote();\n    }\n    return (\n        <div id=\"quote-box\">\n            <span id=\"text\">\n                <p className=\"text\">\n                    <FaQuoteLeft style={{ fontSize: \"3rem\", paddingRight: '10px' }} />\n                    {quote}\n                    <FaQuoteRight style={{ fontSize: \"1.5rem\", paddingLeft: '5px' }} />\n                </p>\n            </span>\n            <div id=\"author\">\n                <p>-{author}</p>\n            </div>\n            <div id=\"buttons\">\n                <div id=\"social-media\">\n                    <a target=\"_blankid\" id=\"tweet-quote\">\n                        <FaTwitterSquare />\n                    </a>\n                    <a target=\"_blankid\" id=\"tumblr-quote\">\n                        <FaTumblrSquare />\n                    </a>\n                </div>\n                <button onClick={() => handleClick()} id=\"new-quote\">\n                    New quote\n                    </button>\n            </div>\n        </div>\n\n    )\n}\n\n\n\nexport default Quotes\n\n","import React from 'react';\nimport './App.css';\nimport Quotes from './components/Quotes';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Quotes />\n      <footer>Code By Kesinee</footer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}